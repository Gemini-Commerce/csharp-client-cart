/*
 * Cart Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = cart.Client.OpenAPIDateConverter;

namespace cart.Model
{
    /// <summary>
    /// CartSetCustomPriceOnItemsRequestCartItem
    /// </summary>
    [DataContract(Name = "cartSetCustomPriceOnItemsRequestCartItem")]
    public partial class CartSetCustomPriceOnItemsRequestCartItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartSetCustomPriceOnItemsRequestCartItem" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="freeOfCharge">freeOfCharge.</param>
        /// <param name="unset">unset.</param>
        /// <param name="customPriceRow">customPriceRow.</param>
        /// <param name="customPriceUnit">customPriceUnit.</param>
        /// <param name="discountPercentage">discountPercentage.</param>
        public CartSetCustomPriceOnItemsRequestCartItem(string id = default(string), bool freeOfCharge = default(bool), bool unset = default(bool), CartMoney customPriceRow = default(CartMoney), CartMoney customPriceUnit = default(CartMoney), float discountPercentage = default(float))
        {
            this.Id = id;
            this.FreeOfCharge = freeOfCharge;
            this.Unset = unset;
            this.CustomPriceRow = customPriceRow;
            this.CustomPriceUnit = customPriceUnit;
            this.DiscountPercentage = discountPercentage;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets FreeOfCharge
        /// </summary>
        [DataMember(Name = "freeOfCharge", EmitDefaultValue = true)]
        public bool FreeOfCharge { get; set; }

        /// <summary>
        /// Gets or Sets Unset
        /// </summary>
        [DataMember(Name = "unset", EmitDefaultValue = true)]
        public bool Unset { get; set; }

        /// <summary>
        /// Gets or Sets CustomPriceRow
        /// </summary>
        [DataMember(Name = "customPriceRow", EmitDefaultValue = false)]
        public CartMoney CustomPriceRow { get; set; }

        /// <summary>
        /// Gets or Sets CustomPriceUnit
        /// </summary>
        [DataMember(Name = "customPriceUnit", EmitDefaultValue = false)]
        public CartMoney CustomPriceUnit { get; set; }

        /// <summary>
        /// Gets or Sets DiscountPercentage
        /// </summary>
        [DataMember(Name = "discountPercentage", EmitDefaultValue = false)]
        public float DiscountPercentage { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CartSetCustomPriceOnItemsRequestCartItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FreeOfCharge: ").Append(FreeOfCharge).Append("\n");
            sb.Append("  Unset: ").Append(Unset).Append("\n");
            sb.Append("  CustomPriceRow: ").Append(CustomPriceRow).Append("\n");
            sb.Append("  CustomPriceUnit: ").Append(CustomPriceUnit).Append("\n");
            sb.Append("  DiscountPercentage: ").Append(DiscountPercentage).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
