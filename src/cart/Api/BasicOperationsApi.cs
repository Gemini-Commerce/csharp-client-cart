/*
 * Cart Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using cart.Client;
using cart.Client.Auth;
using cart.Model;

namespace cart.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBasicOperationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Products
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to add products to a shopping cart. The AddProducts method enables you to specify the tenantId and cartId to identify the target shopping cart, and provide a list of items to be added.
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CartAddProductsResponse</returns>
        CartAddProductsResponse AddProducts(CartAddProductsRequest body, int operationIndex = 0);

        /// <summary>
        /// Add Products
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to add products to a shopping cart. The AddProducts method enables you to specify the tenantId and cartId to identify the target shopping cart, and provide a list of items to be added.
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CartAddProductsResponse</returns>
        ApiResponse<CartAddProductsResponse> AddProductsWithHttpInfo(CartAddProductsRequest body, int operationIndex = 0);
        /// <summary>
        /// Create Cart
        /// </summary>
        /// <remarks>
        /// The CreateCart endpoint allows users to create a new cart for their shopping session. By making a request to this endpoint, users can initiate a new cart and obtain a unique identifier for future cart operations. This endpoint enables seamless cart management and provides a foundation for adding products and performing checkout operations.
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CartCreateCartResponse</returns>
        CartCreateCartResponse CreateCart(CartCreateCartRequest body, int operationIndex = 0);

        /// <summary>
        /// Create Cart
        /// </summary>
        /// <remarks>
        /// The CreateCart endpoint allows users to create a new cart for their shopping session. By making a request to this endpoint, users can initiate a new cart and obtain a unique identifier for future cart operations. This endpoint enables seamless cart management and provides a foundation for adding products and performing checkout operations.
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CartCreateCartResponse</returns>
        ApiResponse<CartCreateCartResponse> CreateCartWithHttpInfo(CartCreateCartRequest body, int operationIndex = 0);
        /// <summary>
        /// Get Active Cart By Customer
        /// </summary>
        /// <remarks>
        /// Get the active cart by customer
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CartGetActiveCartByCustomerResponse</returns>
        CartGetActiveCartByCustomerResponse GetActiveCartByCustomer(CartGetActiveCartByCustomerRequest body, int operationIndex = 0);

        /// <summary>
        /// Get Active Cart By Customer
        /// </summary>
        /// <remarks>
        /// Get the active cart by customer
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CartGetActiveCartByCustomerResponse</returns>
        ApiResponse<CartGetActiveCartByCustomerResponse> GetActiveCartByCustomerWithHttpInfo(CartGetActiveCartByCustomerRequest body, int operationIndex = 0);
        /// <summary>
        /// Get Cart
        /// </summary>
        /// <remarks>
        /// Get the cart
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Get cart request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CartGetCartResponse</returns>
        CartGetCartResponse GetCart(CartGetCartRequest body, int operationIndex = 0);

        /// <summary>
        /// Get Cart
        /// </summary>
        /// <remarks>
        /// Get the cart
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Get cart request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CartGetCartResponse</returns>
        ApiResponse<CartGetCartResponse> GetCartWithHttpInfo(CartGetCartRequest body, int operationIndex = 0);
        /// <summary>
        /// List Carts
        /// </summary>
        /// <remarks>
        /// List all carts
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CartListCartsResponse</returns>
        CartListCartsResponse ListCarts(CartListCartsRequest body, int operationIndex = 0);

        /// <summary>
        /// List Carts
        /// </summary>
        /// <remarks>
        /// List all carts
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CartListCartsResponse</returns>
        ApiResponse<CartListCartsResponse> ListCartsWithHttpInfo(CartListCartsRequest body, int operationIndex = 0);
        /// <summary>
        /// Merge Carts
        /// </summary>
        /// <remarks>
        /// Merge carts
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CartMergeCartsResponse</returns>
        CartMergeCartsResponse MergeCarts(CartMergeCartsRequest body, int operationIndex = 0);

        /// <summary>
        /// Merge Carts
        /// </summary>
        /// <remarks>
        /// Merge carts
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CartMergeCartsResponse</returns>
        ApiResponse<CartMergeCartsResponse> MergeCartsWithHttpInfo(CartMergeCartsRequest body, int operationIndex = 0);
        /// <summary>
        /// Remove Products
        /// </summary>
        /// <remarks>
        /// Remove products from the cart
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object RemoveProducts(CartRemoveProductsRequest body, int operationIndex = 0);

        /// <summary>
        /// Remove Products
        /// </summary>
        /// <remarks>
        /// Remove products from the cart
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RemoveProductsWithHttpInfo(CartRemoveProductsRequest body, int operationIndex = 0);
        /// <summary>
        /// Set Additional Info
        /// </summary>
        /// <remarks>
        /// Set additional info
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object SetAdditionalInfo(CartSetAdditionalInfoRequest body, int operationIndex = 0);

        /// <summary>
        /// Set Additional Info
        /// </summary>
        /// <remarks>
        /// Set additional info
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SetAdditionalInfoWithHttpInfo(CartSetAdditionalInfoRequest body, int operationIndex = 0);
        /// <summary>
        /// Set Notes
        /// </summary>
        /// <remarks>
        /// Set notes
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object SetNotes(CartSetNotesRequest body, int operationIndex = 0);

        /// <summary>
        /// Set Notes
        /// </summary>
        /// <remarks>
        /// Set notes
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SetNotesWithHttpInfo(CartSetNotesRequest body, int operationIndex = 0);
        /// <summary>
        /// Trigger Realignment
        /// </summary>
        /// <remarks>
        /// Trigger realignment
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CartTriggerRealignmentResponse</returns>
        CartTriggerRealignmentResponse TriggerRealignment(CartTriggerRealignmentRequest body, int operationIndex = 0);

        /// <summary>
        /// Trigger Realignment
        /// </summary>
        /// <remarks>
        /// Trigger realignment
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CartTriggerRealignmentResponse</returns>
        ApiResponse<CartTriggerRealignmentResponse> TriggerRealignmentWithHttpInfo(CartTriggerRealignmentRequest body, int operationIndex = 0);
        /// <summary>
        /// Update Cart
        /// </summary>
        /// <remarks>
        /// Update the cart
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object UpdateCart(CartUpdateCartRequest body, int operationIndex = 0);

        /// <summary>
        /// Update Cart
        /// </summary>
        /// <remarks>
        /// Update the cart
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateCartWithHttpInfo(CartUpdateCartRequest body, int operationIndex = 0);
        /// <summary>
        /// Update Products
        /// </summary>
        /// <remarks>
        /// Update products in the cart
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object UpdateProducts(CartUpdateProductsRequest body, int operationIndex = 0);

        /// <summary>
        /// Update Products
        /// </summary>
        /// <remarks>
        /// Update products in the cart
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateProductsWithHttpInfo(CartUpdateProductsRequest body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBasicOperationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add Products
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to add products to a shopping cart. The AddProducts method enables you to specify the tenantId and cartId to identify the target shopping cart, and provide a list of items to be added.
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CartAddProductsResponse</returns>
        System.Threading.Tasks.Task<CartAddProductsResponse> AddProductsAsync(CartAddProductsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Products
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to add products to a shopping cart. The AddProducts method enables you to specify the tenantId and cartId to identify the target shopping cart, and provide a list of items to be added.
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CartAddProductsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartAddProductsResponse>> AddProductsWithHttpInfoAsync(CartAddProductsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Cart
        /// </summary>
        /// <remarks>
        /// The CreateCart endpoint allows users to create a new cart for their shopping session. By making a request to this endpoint, users can initiate a new cart and obtain a unique identifier for future cart operations. This endpoint enables seamless cart management and provides a foundation for adding products and performing checkout operations.
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CartCreateCartResponse</returns>
        System.Threading.Tasks.Task<CartCreateCartResponse> CreateCartAsync(CartCreateCartRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Cart
        /// </summary>
        /// <remarks>
        /// The CreateCart endpoint allows users to create a new cart for their shopping session. By making a request to this endpoint, users can initiate a new cart and obtain a unique identifier for future cart operations. This endpoint enables seamless cart management and provides a foundation for adding products and performing checkout operations.
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CartCreateCartResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartCreateCartResponse>> CreateCartWithHttpInfoAsync(CartCreateCartRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Active Cart By Customer
        /// </summary>
        /// <remarks>
        /// Get the active cart by customer
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CartGetActiveCartByCustomerResponse</returns>
        System.Threading.Tasks.Task<CartGetActiveCartByCustomerResponse> GetActiveCartByCustomerAsync(CartGetActiveCartByCustomerRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Active Cart By Customer
        /// </summary>
        /// <remarks>
        /// Get the active cart by customer
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CartGetActiveCartByCustomerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartGetActiveCartByCustomerResponse>> GetActiveCartByCustomerWithHttpInfoAsync(CartGetActiveCartByCustomerRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Cart
        /// </summary>
        /// <remarks>
        /// Get the cart
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Get cart request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CartGetCartResponse</returns>
        System.Threading.Tasks.Task<CartGetCartResponse> GetCartAsync(CartGetCartRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Cart
        /// </summary>
        /// <remarks>
        /// Get the cart
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Get cart request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CartGetCartResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartGetCartResponse>> GetCartWithHttpInfoAsync(CartGetCartRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Carts
        /// </summary>
        /// <remarks>
        /// List all carts
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CartListCartsResponse</returns>
        System.Threading.Tasks.Task<CartListCartsResponse> ListCartsAsync(CartListCartsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Carts
        /// </summary>
        /// <remarks>
        /// List all carts
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CartListCartsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartListCartsResponse>> ListCartsWithHttpInfoAsync(CartListCartsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Merge Carts
        /// </summary>
        /// <remarks>
        /// Merge carts
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CartMergeCartsResponse</returns>
        System.Threading.Tasks.Task<CartMergeCartsResponse> MergeCartsAsync(CartMergeCartsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Merge Carts
        /// </summary>
        /// <remarks>
        /// Merge carts
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CartMergeCartsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartMergeCartsResponse>> MergeCartsWithHttpInfoAsync(CartMergeCartsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Products
        /// </summary>
        /// <remarks>
        /// Remove products from the cart
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RemoveProductsAsync(CartRemoveProductsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Products
        /// </summary>
        /// <remarks>
        /// Remove products from the cart
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveProductsWithHttpInfoAsync(CartRemoveProductsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Additional Info
        /// </summary>
        /// <remarks>
        /// Set additional info
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SetAdditionalInfoAsync(CartSetAdditionalInfoRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Additional Info
        /// </summary>
        /// <remarks>
        /// Set additional info
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetAdditionalInfoWithHttpInfoAsync(CartSetAdditionalInfoRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Set Notes
        /// </summary>
        /// <remarks>
        /// Set notes
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SetNotesAsync(CartSetNotesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Set Notes
        /// </summary>
        /// <remarks>
        /// Set notes
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetNotesWithHttpInfoAsync(CartSetNotesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trigger Realignment
        /// </summary>
        /// <remarks>
        /// Trigger realignment
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CartTriggerRealignmentResponse</returns>
        System.Threading.Tasks.Task<CartTriggerRealignmentResponse> TriggerRealignmentAsync(CartTriggerRealignmentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trigger Realignment
        /// </summary>
        /// <remarks>
        /// Trigger realignment
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CartTriggerRealignmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CartTriggerRealignmentResponse>> TriggerRealignmentWithHttpInfoAsync(CartTriggerRealignmentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Cart
        /// </summary>
        /// <remarks>
        /// Update the cart
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateCartAsync(CartUpdateCartRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Cart
        /// </summary>
        /// <remarks>
        /// Update the cart
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateCartWithHttpInfoAsync(CartUpdateCartRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Products
        /// </summary>
        /// <remarks>
        /// Update products in the cart
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateProductsAsync(CartUpdateProductsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Products
        /// </summary>
        /// <remarks>
        /// Update products in the cart
        /// </remarks>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateProductsWithHttpInfoAsync(CartUpdateProductsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBasicOperationsApi : IBasicOperationsApiSync, IBasicOperationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BasicOperationsApi : IBasicOperationsApi
    {
        private cart.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BasicOperationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BasicOperationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BasicOperationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BasicOperationsApi(string basePath)
        {
            this.Configuration = cart.Client.Configuration.MergeConfigurations(
                cart.Client.GlobalConfiguration.Instance,
                new cart.Client.Configuration { BasePath = basePath }
            );
            this.Client = new cart.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new cart.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = cart.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BasicOperationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BasicOperationsApi(cart.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = cart.Client.Configuration.MergeConfigurations(
                cart.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new cart.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new cart.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = cart.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BasicOperationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BasicOperationsApi(cart.Client.ISynchronousClient client, cart.Client.IAsynchronousClient asyncClient, cart.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = cart.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public cart.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public cart.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public cart.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public cart.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add Products This endpoint allows you to add products to a shopping cart. The AddProducts method enables you to specify the tenantId and cartId to identify the target shopping cart, and provide a list of items to be added.
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CartAddProductsResponse</returns>
        public CartAddProductsResponse AddProducts(CartAddProductsRequest body, int operationIndex = 0)
        {
            cart.Client.ApiResponse<CartAddProductsResponse> localVarResponse = AddProductsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Products This endpoint allows you to add products to a shopping cart. The AddProducts method enables you to specify the tenantId and cartId to identify the target shopping cart, and provide a list of items to be added.
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CartAddProductsResponse</returns>
        public cart.Client.ApiResponse<CartAddProductsResponse> AddProductsWithHttpInfo(CartAddProductsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new cart.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->AddProducts");
            }

            cart.Client.RequestOptions localVarRequestOptions = new cart.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cart.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cart.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.AddProducts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CartAddProductsResponse>("/cart.Cart/AddProducts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddProducts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Products This endpoint allows you to add products to a shopping cart. The AddProducts method enables you to specify the tenantId and cartId to identify the target shopping cart, and provide a list of items to be added.
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CartAddProductsResponse</returns>
        public async System.Threading.Tasks.Task<CartAddProductsResponse> AddProductsAsync(CartAddProductsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cart.Client.ApiResponse<CartAddProductsResponse> localVarResponse = await AddProductsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Products This endpoint allows you to add products to a shopping cart. The AddProducts method enables you to specify the tenantId and cartId to identify the target shopping cart, and provide a list of items to be added.
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CartAddProductsResponse)</returns>
        public async System.Threading.Tasks.Task<cart.Client.ApiResponse<CartAddProductsResponse>> AddProductsWithHttpInfoAsync(CartAddProductsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new cart.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->AddProducts");
            }


            cart.Client.RequestOptions localVarRequestOptions = new cart.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cart.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cart.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.AddProducts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CartAddProductsResponse>("/cart.Cart/AddProducts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddProducts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Cart The CreateCart endpoint allows users to create a new cart for their shopping session. By making a request to this endpoint, users can initiate a new cart and obtain a unique identifier for future cart operations. This endpoint enables seamless cart management and provides a foundation for adding products and performing checkout operations.
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CartCreateCartResponse</returns>
        public CartCreateCartResponse CreateCart(CartCreateCartRequest body, int operationIndex = 0)
        {
            cart.Client.ApiResponse<CartCreateCartResponse> localVarResponse = CreateCartWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Cart The CreateCart endpoint allows users to create a new cart for their shopping session. By making a request to this endpoint, users can initiate a new cart and obtain a unique identifier for future cart operations. This endpoint enables seamless cart management and provides a foundation for adding products and performing checkout operations.
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CartCreateCartResponse</returns>
        public cart.Client.ApiResponse<CartCreateCartResponse> CreateCartWithHttpInfo(CartCreateCartRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new cart.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->CreateCart");
            }

            cart.Client.RequestOptions localVarRequestOptions = new cart.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cart.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cart.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.CreateCart";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CartCreateCartResponse>("/cart.Cart/CreateCart", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCart", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Cart The CreateCart endpoint allows users to create a new cart for their shopping session. By making a request to this endpoint, users can initiate a new cart and obtain a unique identifier for future cart operations. This endpoint enables seamless cart management and provides a foundation for adding products and performing checkout operations.
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CartCreateCartResponse</returns>
        public async System.Threading.Tasks.Task<CartCreateCartResponse> CreateCartAsync(CartCreateCartRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cart.Client.ApiResponse<CartCreateCartResponse> localVarResponse = await CreateCartWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Cart The CreateCart endpoint allows users to create a new cart for their shopping session. By making a request to this endpoint, users can initiate a new cart and obtain a unique identifier for future cart operations. This endpoint enables seamless cart management and provides a foundation for adding products and performing checkout operations.
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CartCreateCartResponse)</returns>
        public async System.Threading.Tasks.Task<cart.Client.ApiResponse<CartCreateCartResponse>> CreateCartWithHttpInfoAsync(CartCreateCartRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new cart.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->CreateCart");
            }


            cart.Client.RequestOptions localVarRequestOptions = new cart.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cart.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cart.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.CreateCart";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CartCreateCartResponse>("/cart.Cart/CreateCart", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCart", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Active Cart By Customer Get the active cart by customer
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CartGetActiveCartByCustomerResponse</returns>
        public CartGetActiveCartByCustomerResponse GetActiveCartByCustomer(CartGetActiveCartByCustomerRequest body, int operationIndex = 0)
        {
            cart.Client.ApiResponse<CartGetActiveCartByCustomerResponse> localVarResponse = GetActiveCartByCustomerWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Active Cart By Customer Get the active cart by customer
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CartGetActiveCartByCustomerResponse</returns>
        public cart.Client.ApiResponse<CartGetActiveCartByCustomerResponse> GetActiveCartByCustomerWithHttpInfo(CartGetActiveCartByCustomerRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new cart.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->GetActiveCartByCustomer");
            }

            cart.Client.RequestOptions localVarRequestOptions = new cart.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cart.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cart.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.GetActiveCartByCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CartGetActiveCartByCustomerResponse>("/cart.Cart/GetActiveCartByCustomer", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetActiveCartByCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Active Cart By Customer Get the active cart by customer
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CartGetActiveCartByCustomerResponse</returns>
        public async System.Threading.Tasks.Task<CartGetActiveCartByCustomerResponse> GetActiveCartByCustomerAsync(CartGetActiveCartByCustomerRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cart.Client.ApiResponse<CartGetActiveCartByCustomerResponse> localVarResponse = await GetActiveCartByCustomerWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Active Cart By Customer Get the active cart by customer
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CartGetActiveCartByCustomerResponse)</returns>
        public async System.Threading.Tasks.Task<cart.Client.ApiResponse<CartGetActiveCartByCustomerResponse>> GetActiveCartByCustomerWithHttpInfoAsync(CartGetActiveCartByCustomerRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new cart.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->GetActiveCartByCustomer");
            }


            cart.Client.RequestOptions localVarRequestOptions = new cart.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cart.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cart.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.GetActiveCartByCustomer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CartGetActiveCartByCustomerResponse>("/cart.Cart/GetActiveCartByCustomer", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetActiveCartByCustomer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Cart Get the cart
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Get cart request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CartGetCartResponse</returns>
        public CartGetCartResponse GetCart(CartGetCartRequest body, int operationIndex = 0)
        {
            cart.Client.ApiResponse<CartGetCartResponse> localVarResponse = GetCartWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Cart Get the cart
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Get cart request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CartGetCartResponse</returns>
        public cart.Client.ApiResponse<CartGetCartResponse> GetCartWithHttpInfo(CartGetCartRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new cart.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->GetCart");
            }

            cart.Client.RequestOptions localVarRequestOptions = new cart.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cart.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cart.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.GetCart";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CartGetCartResponse>("/cart.Cart/GetCart", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCart", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Cart Get the cart
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Get cart request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CartGetCartResponse</returns>
        public async System.Threading.Tasks.Task<CartGetCartResponse> GetCartAsync(CartGetCartRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cart.Client.ApiResponse<CartGetCartResponse> localVarResponse = await GetCartWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Cart Get the cart
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Get cart request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CartGetCartResponse)</returns>
        public async System.Threading.Tasks.Task<cart.Client.ApiResponse<CartGetCartResponse>> GetCartWithHttpInfoAsync(CartGetCartRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new cart.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->GetCart");
            }


            cart.Client.RequestOptions localVarRequestOptions = new cart.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cart.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cart.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.GetCart";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CartGetCartResponse>("/cart.Cart/GetCart", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCart", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Carts List all carts
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CartListCartsResponse</returns>
        public CartListCartsResponse ListCarts(CartListCartsRequest body, int operationIndex = 0)
        {
            cart.Client.ApiResponse<CartListCartsResponse> localVarResponse = ListCartsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Carts List all carts
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CartListCartsResponse</returns>
        public cart.Client.ApiResponse<CartListCartsResponse> ListCartsWithHttpInfo(CartListCartsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new cart.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->ListCarts");
            }

            cart.Client.RequestOptions localVarRequestOptions = new cart.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cart.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cart.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.ListCarts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CartListCartsResponse>("/cart.Cart/ListCarts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCarts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Carts List all carts
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CartListCartsResponse</returns>
        public async System.Threading.Tasks.Task<CartListCartsResponse> ListCartsAsync(CartListCartsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cart.Client.ApiResponse<CartListCartsResponse> localVarResponse = await ListCartsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Carts List all carts
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CartListCartsResponse)</returns>
        public async System.Threading.Tasks.Task<cart.Client.ApiResponse<CartListCartsResponse>> ListCartsWithHttpInfoAsync(CartListCartsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new cart.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->ListCarts");
            }


            cart.Client.RequestOptions localVarRequestOptions = new cart.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cart.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cart.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.ListCarts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CartListCartsResponse>("/cart.Cart/ListCarts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListCarts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Merge Carts Merge carts
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CartMergeCartsResponse</returns>
        public CartMergeCartsResponse MergeCarts(CartMergeCartsRequest body, int operationIndex = 0)
        {
            cart.Client.ApiResponse<CartMergeCartsResponse> localVarResponse = MergeCartsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Merge Carts Merge carts
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CartMergeCartsResponse</returns>
        public cart.Client.ApiResponse<CartMergeCartsResponse> MergeCartsWithHttpInfo(CartMergeCartsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new cart.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->MergeCarts");
            }

            cart.Client.RequestOptions localVarRequestOptions = new cart.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cart.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cart.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.MergeCarts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CartMergeCartsResponse>("/cart.Cart/MergeCarts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MergeCarts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Merge Carts Merge carts
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CartMergeCartsResponse</returns>
        public async System.Threading.Tasks.Task<CartMergeCartsResponse> MergeCartsAsync(CartMergeCartsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cart.Client.ApiResponse<CartMergeCartsResponse> localVarResponse = await MergeCartsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Merge Carts Merge carts
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CartMergeCartsResponse)</returns>
        public async System.Threading.Tasks.Task<cart.Client.ApiResponse<CartMergeCartsResponse>> MergeCartsWithHttpInfoAsync(CartMergeCartsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new cart.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->MergeCarts");
            }


            cart.Client.RequestOptions localVarRequestOptions = new cart.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cart.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cart.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.MergeCarts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CartMergeCartsResponse>("/cart.Cart/MergeCarts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MergeCarts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Products Remove products from the cart
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object RemoveProducts(CartRemoveProductsRequest body, int operationIndex = 0)
        {
            cart.Client.ApiResponse<Object> localVarResponse = RemoveProductsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Products Remove products from the cart
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public cart.Client.ApiResponse<Object> RemoveProductsWithHttpInfo(CartRemoveProductsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new cart.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->RemoveProducts");
            }

            cart.Client.RequestOptions localVarRequestOptions = new cart.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cart.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cart.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.RemoveProducts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/cart.Cart/RemoveProducts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveProducts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Products Remove products from the cart
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RemoveProductsAsync(CartRemoveProductsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cart.Client.ApiResponse<Object> localVarResponse = await RemoveProductsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Products Remove products from the cart
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<cart.Client.ApiResponse<Object>> RemoveProductsWithHttpInfoAsync(CartRemoveProductsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new cart.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->RemoveProducts");
            }


            cart.Client.RequestOptions localVarRequestOptions = new cart.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cart.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cart.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.RemoveProducts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/cart.Cart/RemoveProducts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveProducts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Additional Info Set additional info
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object SetAdditionalInfo(CartSetAdditionalInfoRequest body, int operationIndex = 0)
        {
            cart.Client.ApiResponse<Object> localVarResponse = SetAdditionalInfoWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Additional Info Set additional info
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public cart.Client.ApiResponse<Object> SetAdditionalInfoWithHttpInfo(CartSetAdditionalInfoRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new cart.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->SetAdditionalInfo");
            }

            cart.Client.RequestOptions localVarRequestOptions = new cart.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cart.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cart.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.SetAdditionalInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/cart.Cart/SetAdditionalInfo", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetAdditionalInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Additional Info Set additional info
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SetAdditionalInfoAsync(CartSetAdditionalInfoRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cart.Client.ApiResponse<Object> localVarResponse = await SetAdditionalInfoWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Additional Info Set additional info
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<cart.Client.ApiResponse<Object>> SetAdditionalInfoWithHttpInfoAsync(CartSetAdditionalInfoRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new cart.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->SetAdditionalInfo");
            }


            cart.Client.RequestOptions localVarRequestOptions = new cart.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cart.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cart.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.SetAdditionalInfo";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/cart.Cart/SetAdditionalInfo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetAdditionalInfo", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Notes Set notes
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object SetNotes(CartSetNotesRequest body, int operationIndex = 0)
        {
            cart.Client.ApiResponse<Object> localVarResponse = SetNotesWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Notes Set notes
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public cart.Client.ApiResponse<Object> SetNotesWithHttpInfo(CartSetNotesRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new cart.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->SetNotes");
            }

            cart.Client.RequestOptions localVarRequestOptions = new cart.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cart.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cart.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.SetNotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/cart.Cart/SetNotes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetNotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Set Notes Set notes
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SetNotesAsync(CartSetNotesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cart.Client.ApiResponse<Object> localVarResponse = await SetNotesWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Set Notes Set notes
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<cart.Client.ApiResponse<Object>> SetNotesWithHttpInfoAsync(CartSetNotesRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new cart.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->SetNotes");
            }


            cart.Client.RequestOptions localVarRequestOptions = new cart.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cart.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cart.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.SetNotes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/cart.Cart/SetNotes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetNotes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger Realignment Trigger realignment
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CartTriggerRealignmentResponse</returns>
        public CartTriggerRealignmentResponse TriggerRealignment(CartTriggerRealignmentRequest body, int operationIndex = 0)
        {
            cart.Client.ApiResponse<CartTriggerRealignmentResponse> localVarResponse = TriggerRealignmentWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger Realignment Trigger realignment
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CartTriggerRealignmentResponse</returns>
        public cart.Client.ApiResponse<CartTriggerRealignmentResponse> TriggerRealignmentWithHttpInfo(CartTriggerRealignmentRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new cart.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->TriggerRealignment");
            }

            cart.Client.RequestOptions localVarRequestOptions = new cart.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cart.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cart.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.TriggerRealignment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CartTriggerRealignmentResponse>("/cart.Cart/TriggerRealignment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TriggerRealignment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trigger Realignment Trigger realignment
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CartTriggerRealignmentResponse</returns>
        public async System.Threading.Tasks.Task<CartTriggerRealignmentResponse> TriggerRealignmentAsync(CartTriggerRealignmentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cart.Client.ApiResponse<CartTriggerRealignmentResponse> localVarResponse = await TriggerRealignmentWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trigger Realignment Trigger realignment
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CartTriggerRealignmentResponse)</returns>
        public async System.Threading.Tasks.Task<cart.Client.ApiResponse<CartTriggerRealignmentResponse>> TriggerRealignmentWithHttpInfoAsync(CartTriggerRealignmentRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new cart.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->TriggerRealignment");
            }


            cart.Client.RequestOptions localVarRequestOptions = new cart.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cart.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cart.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.TriggerRealignment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CartTriggerRealignmentResponse>("/cart.Cart/TriggerRealignment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TriggerRealignment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Cart Update the cart
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object UpdateCart(CartUpdateCartRequest body, int operationIndex = 0)
        {
            cart.Client.ApiResponse<Object> localVarResponse = UpdateCartWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Cart Update the cart
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public cart.Client.ApiResponse<Object> UpdateCartWithHttpInfo(CartUpdateCartRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new cart.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UpdateCart");
            }

            cart.Client.RequestOptions localVarRequestOptions = new cart.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cart.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cart.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UpdateCart";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/cart.Cart/UpdateCart", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCart", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Cart Update the cart
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateCartAsync(CartUpdateCartRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cart.Client.ApiResponse<Object> localVarResponse = await UpdateCartWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Cart Update the cart
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<cart.Client.ApiResponse<Object>> UpdateCartWithHttpInfoAsync(CartUpdateCartRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new cart.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UpdateCart");
            }


            cart.Client.RequestOptions localVarRequestOptions = new cart.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cart.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cart.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UpdateCart";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/cart.Cart/UpdateCart", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCart", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Products Update products in the cart
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object UpdateProducts(CartUpdateProductsRequest body, int operationIndex = 0)
        {
            cart.Client.ApiResponse<Object> localVarResponse = UpdateProductsWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Products Update products in the cart
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public cart.Client.ApiResponse<Object> UpdateProductsWithHttpInfo(CartUpdateProductsRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new cart.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UpdateProducts");
            }

            cart.Client.RequestOptions localVarRequestOptions = new cart.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cart.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cart.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UpdateProducts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/cart.Cart/UpdateProducts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProducts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Products Update products in the cart
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateProductsAsync(CartUpdateProductsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            cart.Client.ApiResponse<Object> localVarResponse = await UpdateProductsWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Products Update products in the cart
        /// </summary>
        /// <exception cref="cart.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<cart.Client.ApiResponse<Object>> UpdateProductsWithHttpInfoAsync(CartUpdateProductsRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new cart.Client.ApiException(400, "Missing required parameter 'body' when calling BasicOperationsApi->UpdateProducts");
            }


            cart.Client.RequestOptions localVarRequestOptions = new cart.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = cart.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = cart.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "BasicOperationsApi.UpdateProducts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Authorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/cart.Cart/UpdateProducts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProducts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
